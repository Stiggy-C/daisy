package io.openenterprise.daisy.spark.ml;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3URI;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.openenterprise.daisy.springframework.spark.convert.JsonNodeToDatasetConverter;
import lombok.SneakyThrows;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

import org.apache.commons.io.IOUtils;
import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;

import org.pmml4s.spark.ScoreModel;
import org.springframework.util.ResourceUtils;

import javax.annotation.Nonnull;
import javax.cache.Cache;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.util.Map;
import java.util.NoSuchElementException;

/**
 * This is the base of machine learning operations related to the <a href="https://dmg.org/pmml/v4-4-1/GeneralStructure.html">PMML</a>
 * standard. Implementation of this class can import PMML based models exported by other big data libraries like
 * <a href="https://github.com/jpmml/sklearn2pmml">Scikit-Learn</a> for prediction.
 */
public abstract class AbstractPmmlMachineLearningService implements MachineLearningService<ScoreModel> {

    @Inject
    protected AmazonS3 amazonS3;

    @Inject
    protected HttpClient httpClient;

    @Inject
    protected JsonNodeToDatasetConverter jsonNodeToDatasetConverter;

    @Inject
    protected ObjectMapper objectMapper;

    @Inject
    @Named("pmmlModelCache")
    protected Cache<String, ScoreModel> pmmlModelCache;

    /**
     * Download the PMML file generated by other framework(s) from the given uriString and build {@link ScoreModel} to
     * be used by Apache Spark. The built {@link ScoreModel} will be stored in {@link Cache} until it was being evicted
     * or daisy (or its JVM) terminated.
     *
     * @param uriString
     * @return
     * @throws IOException
     */
    @Nonnull
    public String importModel(@Nonnull String uriString) throws IOException {
        var scoreModel = pmmlModelCache.containsKey(uriString) ?
                pmmlModelCache.get(uriString) : ScoreModel.fromFile(downloadFile(uriString));
        try {
            return scoreModel.uid();
        } finally {
            pmmlModelCache.putIfAbsent(scoreModel.uid(), scoreModel);
        }
    }


    /**
     * Fetch the PMML model with the given id from {@link Cache}.
     *
     * @param modelId
     * @param jsonString
     * @return
     * @Throws NoSuchElementException if PMML model with the given modelId is not in the {@link Cache}
     * @Throws JsonProcessingException if given jsonString can not be converted to {@link Dataset}
     */
    @Nonnull
    public Dataset<Row> predict(@Nonnull String modelId, @Nonnull String jsonString, @Nonnull Map<String, ?> parameters) {
        if (!pmmlModelCache.containsKey(modelId)) {
            throw new NoSuchElementException();
        }

        var scoreModel = pmmlModelCache.get(modelId);

        return predict(scoreModel, jsonString, parameters);
    }

    @SneakyThrows
    @Nonnull
    @Override
    public Dataset<Row> predict(@Nonnull ScoreModel model, @Nonnull String jsonString, @Nonnull Map<String, ?> parameters) {
        var jsonNode = objectMapper.readTree(jsonString);
        var dataset = jsonNodeToDatasetConverter.convert(jsonNode);

        return model.transform(dataset);
    }

    @Nonnull
    protected File createLocalTempFileForUri(@Nonnull URI uri) throws IOException {
        var url = uri.toURL();
        var fileName = FilenameUtils.getName(url.getPath());

        return File.createTempFile(fileName, "");
    }

    @Nonnull
    protected File downloadFile(@Nonnull String uriString) throws IOException {
        var uri = URI.create(uriString);

        File file;

        switch (uri.getScheme()) {
            case "classpath":
            case "file":
                file = ResourceUtils.getFile(uri);
                break;
            case "http":
            case "https":
                var httpGet = new HttpGet(uri);

                file = httpClient.execute(httpGet, classicHttpResponse -> {
                    var thisFile = createLocalTempFileForUri(uri);

                    try (var fileOutputStream = new FileOutputStream(thisFile)) {
                        IOUtils.copyLarge(classicHttpResponse.getEntity().getContent(), fileOutputStream);
                    }

                    return thisFile;
                });

                break;
            case "s3":
                file = createLocalTempFileForUri(uri);

                var amazonS3Uri = new AmazonS3URI(uri);
                var s3Object = amazonS3.getObject(amazonS3Uri.getBucket(), amazonS3Uri.getKey());
                var s3ObjectInputStream = s3Object.getObjectContent();

                FileUtils.copyInputStreamToFile(s3ObjectInputStream, file);
                break;
            default:
                throw new UnsupportedOperationException();
        }

        return file;
    }
}
